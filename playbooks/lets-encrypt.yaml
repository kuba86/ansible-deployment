- name: Lets Encrypt
  hosts: wyse01.tailnet-ba52.ts.net
  gather_facts: false
  vars_files:
    - "../inventories/prod/host_vars/{{ inventory_hostname }}.yaml"
    - "../inventories/prod/secret_vars/{{ inventory_hostname }}.yaml"
    - "../inventories/prod/secret_vars/all.yaml"
  vars:
    main_user: core
  tasks:
      
    - name: Lets Encrypt | Renew
      ansible.builtin.shell: |
        set -euo pipefail
        
        export lego_version="latest"
        export email="{{ lets_encrypt_email }}"
        export cf_dns_api_token="{{ cf_dns_api_token }}"
        export cf_polling_interval="30"
        export cf_propagation_timeout="130"
        export cf_ttl="120"
        export domains="{{ lets_encrypt_domains }}"
        export lets_encrypt_path="{{ lets_encrypt_path }}"
        export dns_servers="1.1.1.1:53,1.0.0.1:53"
        
        function renew() {
          read -ra domain_array <<< "$domains"
        
          for domain in "${domain_array[@]}"; do
            echo "------ $domain -------" >&2
            podman run --rm \
              --name=letsencrypt \
              --volume="$lets_encrypt_path/.lego:/.lego:z" \
              --env=CF_DNS_API_TOKEN="$cf_dns_api_token" \
              --env=CLOUDFLARE_POLLING_INTERVAL="$cf_polling_interval" \
              --env=CLOUDFLARE_PROPAGATION_TIMEOUT="$cf_propagation_timeout" \
              --env=CLOUDFLARE_TTL="$cf_ttl" \
              docker.io/goacme/lego:"$lego_version" \
                --accept-tos \
                --dns.resolvers="$dns_servers" \
                --email="$email" \
                --dns=cloudflare \
                --domains="$domain" \
                --domains="*.$domain" \
                renew --no-random-sleep
          done
        }
        
        renew
      args:
        executable: /usr/bin/bash
      register: lets_encrypt_renew_output
      changed_when: "'Server responded with a certificate.' in lets_encrypt_renew_output.stderr"
    
    - name: Lets Encrypt | Caddy setup certs
      ansible.builtin.shell: |
        #! /usr/bin/env bash
        
        set -euo pipefail
        
        export domains="{{ lets_encrypt_domains }}"
        export lets_encrypt_path="{{ lets_encrypt_path }}"
        export caddy_path="{{ caddy_path }}"
        
        read -ra domain_array <<< "$domains"
        
        counter=0
        
        function check_certs() {
          for domain in "${domain_array[@]}"; do
            local source_crt="$lets_encrypt_path/.lego/certificates/$domain.crt"
            local dest_crt="$caddy_path/tls/live/$domain.crt"
        
            local source_key="$lets_encrypt_path/.lego/certificates/$domain.key"
            local dest_key="$caddy_path/tls/live/$domain.key"
        
            # Ensure source files exist before trying to compare
            if [[ ! -f "$source_crt" || ! -f "$source_key" ]]; then
              echo "ERROR: Source certificate or key for $domain not found. Skipping."
              continue
            fi
        
            if ! cmp --silent "$source_crt" "$dest_crt" || ! cmp --silent "$source_key" "$dest_key"; then
              echo "Cert or key for $domain has changed. Incrementing counter."
              ((counter++))
            fi
          done
        }
        
        function copy_certs() {
          for domain in "${domain_array[@]}"; do
            echo "------ $domain -------"
            cp "$lets_encrypt_path/.lego/certificates/$domain.crt" "$caddy_path/tls/live/$domain.crt"
            cp "$lets_encrypt_path/.lego/certificates/$domain.key" "$caddy_path/tls/live/$domain.key"
          done
        }
        
        check_certs
        
        if [ $counter -gt 0 ]; then
          ntfy.fish \
            --title "Lets Encrypt | Caddy setup certs" \
            --tags "lets-encrypt" \
            --topic "servers" \
            --server_url "{{ ntfy_server }}" \
            --message "Starting to copy Lets Encrypt certificates and restarting Caddy" \
            --priority "high" \
            --apikey "{{ ntfy_api_token }}"
        
          copy_certs
        
          echo "------ Restarting Caddy Server -------"
          podman exec caddy caddy reload --force --config /etc/caddy/Caddyfile
        else
          echo "No certs changed"
        fi
      args:
        executable: /usr/bin/bash
      register: lets_encrypt_cert_setup_output
      changed_when: "'Restarting Caddy Server' in lets_encrypt_cert_setup_output.stdout"
