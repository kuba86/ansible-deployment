- name: Install Scala CLI
  hosts: coreos:dnf:desktop
  gather_facts: false
  vars_files:
    - "../inventories/prod/host_vars/{{ inventory_hostname }}.yaml"
    - "../inventories/prod/secret_vars/{{ inventory_hostname }}.yaml"
    - "../inventories/prod/secret_vars/all.yaml"
  vars:
    main_user: core
  tasks:

    - name: Scala CLI | Install
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'
        
        scala_cli_url="https://github.com/Virtuslab/scala-cli/releases/latest/download/scala-cli-$(uname -m)-pc-linux.gz"
        
        if realpath $(which scala-cli) &> /dev/null
        then
          echo "scala-cli is installed and available in PATH"
          scala_cli_path="$(realpath $(which scala-cli))"
          curl -fL $scala_cli_url | gzip -d > scala-cli
          chmod +x scala-cli
          mv scala-cli $scala_cli_path
        else
          echo "scala-cli is not installed or not in PATH"
          curl -fL $scala_cli_url | gzip -d > scala-cli
          chmod +x scala-cli
          mkdir -p /home/{{ main_user }}/.local/bin
          mv scala-cli /home/{{ main_user }}/.local/bin/scala-cli
        fi
        
        echo "scala-cli installed in $(realpath $(which scala-cli))"
      register: install_scalacli_output
      changed_when: "'scala-cli is not installed or not in PATH' in install_scalacli_output.stdout"
      become_user: "{{ main_user }}"

    - name: Scala CLI | Validate scala-cli installation
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'
        
        scala-cli version
      register: scala_cli_version
      failed_when: scala_cli_version.rc != 0
      changed_when: false
      become_user: "{{ main_user }}"

    - name: Scala CLI | setup power mode to true
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'
        
        scala_cli_power_mode=$(scala-cli config power)
        
        if [[ "$scala_cli_power_mode" == "true" ]]; then
          echo "Scala-Cli power mode was already set correctly"
        else
          echo "Scala-Cli power mode set to FALSE, changing to TRUE"
          scala-cli config power true
        fi
      register: scala_cli_power_mode
      failed_when: scala_cli_power_mode.rc != 0
      changed_when: "'Scala-Cli power mode set to FALSE, changing to TRUE' in scala_cli_power_mode.stdout"
      become_user: "{{ main_user }}"
      
    - name: Scala CLI | install coursier
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'
        
        user_bin_path="/home/{{ main_user }}/bin"
        cs_bin_path="$user_bin_path/cs"
        cs_url="https://github.com/coursier/launchers/raw/master/coursier"
        
        if [ ! -f $cs_bin_path ]; then
          echo "Installing coursier..."
          mkdir -p $user_bin_path
          chown {{ main_user }}:{{ main_user }} $user_bin_path
          curl -fL "https://github.com/coursier/launchers/raw/master/coursier" > $cs_bin_path
          chmod u+x $cs_bin_path
          chown {{ main_user }}:{{ main_user }} $cs_bin_path
        else
          echo "$cs_bin_path already exists, updating..."
          curl -fL "https://github.com/coursier/launchers/raw/master/coursier" > $cs_bin_path
          chmod u+x $cs_bin_path
          chown {{ main_user }}:{{ main_user }} $cs_bin_path
        fi
      register: scala_cli_install_coursier
      failed_when: scala_cli_install_coursier.rc != 0
      changed_when: "'Installing coursier...' in scala_cli_install_coursier.stdout"
      become_user: "{{ main_user }}"
      
    - name: Scala CLI | Validate coursier installation
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'
        
        cs version
      register: cs_version
      failed_when: cs_version.rc != 0
      changed_when: false
      become_user: "{{ main_user }}"
      
    - name: Scala CLI | copy scala-cli-jvm-setup.scala
      ansible.builtin.copy:
        src: ../files/scala-cli-jvm-setup.scala
        dest: /home/{{ main_user }}/scala-cli-jvm-setup.scala
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '744'
        
    - name: Scala CLI | download JDK via scala-cli
      ansible.builtin.shell: |
        set -euo pipefail
        IFS=$'\n\t'

        if [ -f "$HOME/.profile" ]; then
          source "$HOME/.profile"
        fi

        scala-cli clean /home/{{ main_user }}
        /home/{{ main_user }}/scala-cli-jvm-setup.scala
        scala-cli clean /home/{{ main_user }}
      register: scala_cli_download_jdk
      failed_when: scala_cli_download_jdk.rc != 0
      changed_when: false
      become_user: "{{ main_user }}"

    - name: Scala CLI | setup JDK env vars
      ansible.builtin.copy:
        src: ../files/55-jvm.bashrc
        dest: /home/{{ main_user }}/.bashrc.d/55-jvm.bashrc
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '644'
        
    - name: Scala CLI | setup JAVA_HOME and PATH
      ansible.builtin.copy:
        src: ../files/56-jvm.bashrc
        dest: /home/{{ main_user }}/.bashrc.d/56-jvm.bashrc
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '644'
        
    - name: Scala CLI | setup fish shell completions
      ansible.builtin.copy:
        src: ../files/scala-cli-completions.fish
        dest: /home/{{ main_user }}/.config/fish/conf.d/scala-cli-completions.fish
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '644'
      
    - name: Scala CLI | Display Scala CLI version
      ansible.builtin.debug:
        msg: "Installed Scala CLI version: {{ scala_cli_version.stdout }}"
        
    - name: Scala CLI | Display coursier version
      ansible.builtin.debug:
        msg: "Installed coursier version: {{ cs_version.stdout }}"
