- name: Install tailscale
  hosts: coreos:dnf:desktop
  gather_facts: true
  serial: 4
  vars_prompt:
    - name: tailscale_key
      prompt: Enter the tailscale key
      private: true

  tasks:

    - name: Tailscale | add repository
      become: true
      ansible.builtin.copy:
        content: |
          [tailscale-stable]
          name=Tailscale stable
          baseurl=https://pkgs.tailscale.com/stable/fedora/$basearch
          enabled=1
          type=rpm
          repo_gpgcheck=1
          gpgcheck=1
          gpgkey=https://pkgs.tailscale.com/stable/fedora/repo.gpg
        dest: /etc/yum.repos.d/tailscale.repo
        owner: root
        group: root
        mode: '644'

    - name: Tailscale | install rpm-ostree
      become: true
      ansible.builtin.shell: |
        rpm-ostree install \
        --idempotent \
        --apply-live \
        --unchanged-exit-77 \
        --assumeyes \
        tailscale
        jq
      register: install_rpm_ostree
      failed_when: >
        (install_rpm_ostree.rc == 1) or
        (install_rpm_ostree.rc == 2) or
        (install_rpm_ostree.rc == 3) or
        (install_rpm_ostree.rc == 4) or
        (install_rpm_ostree.rc == 78)
      changed_when: >
        install_rpm_ostree.rc != 77
      when:
        - ansible_pkg_mgr in ['atomic_container']

    - name: Tailscale | install dnf
      become: true
      ansible.builtin.dnf:
        name:
          - tailscale
          - jq
        state: present
      when:
        - ansible_pkg_mgr in ['dnf', 'dnf5']

#    should be executed on each network change
#    verify what state was before to correctly report change state
    - name: Tailscale | optimize system
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        set -e
        NETDEV=$(ip -o route get 8.8.8.8 | cut -f 5 -d " ")
        ethtool -K $NETDEV rx-udp-gro-forwarding on rx-gro-list off
      register: tailscale_optimize_system
      changed_when: tailscale_optimize_system.rc != 0

    - name: Tailscale | set net.ipv4.ip_forward=1
      become: true
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_file: /etc/sysctl.d/20-tailscale.conf
        state: present

    - name: Tailscale | set net.ipv6.conf.all.forwarding=1
      become: true
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: '1'
        sysctl_file: /etc/sysctl.d/20-tailscale.conf
        state: present

    - name: Tailscale | add profile env vars
      become: true
      ansible.builtin.copy:
        content: |
          export TAILSCALE_IP=$(tailscale status --json | jq -r .Self.TailscaleIPs[0])
          export TAILSCALE_SHORT_DOMAIN=$(tailscale status --json | jq -r .Self.HostName)
          export TAILSCALE_FULL_DOMAIN=$(tailscale status --json | jq -r .CertDomains[])
        dest: /etc/profile.d/10-tailscale.sh
        owner: root
        group: root
        mode: '644'

    - name: Tailscale | systemd reload
      become: true
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Tailscale | start systemd service
      become: true
      ansible.builtin.systemd_service:
        state: started
        name: tailscaled.service

    # how to make sure this only runs when no exit-node, accept-routes and tags are set?
    # after started run command and verify current settings?
    # maybe run default tailscale setting and then after it is up modify them in idempotent way?
    # verify with tailscale status --json if running and if correctly logged in.
    #
    - name: Tailscale | up
      become: true
      ansible.builtin.shell: |
        tailscale up \
        --authkey={{ tailscale_key }} \
        --advertise-exit-node \
        --accept-routes \
        --advertise-tags 'tag:server,tag:kubernetes'
      register: tailscale_up
      changed_when: tailscale_up.rc != 0
